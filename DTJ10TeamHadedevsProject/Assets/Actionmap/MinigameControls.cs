//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Actionmap/MinigameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MinigameControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MinigameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MinigameControls"",
    ""maps"": [
        {
            ""name"": ""MinigameUIControls"",
            ""id"": ""a8cc7084-667f-413e-a362-154a80a9b29b"",
            ""actions"": [
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""268c091e-cced-4a90-8a63-6801b1b59155"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""af05fdfb-dabe-4b18-a0ca-b010d583bbbe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""da9330fe-58dd-4e78-8efb-3b81fa4acdc3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""098349fe-9e7f-4a24-a1c4-8429d53c2363"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""ce206721-249a-4901-b8d8-6d47f18fe5ab"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe39386c-d890-4e29-a8b2-791ba7ce65b6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7631e6cd-0cb5-4980-9702-9edf0ddfe138"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6b0fa0c-bbc3-482e-b6b4-b0815973c65d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee5eb388-4739-4c98-b112-6b43803705b9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f0dde14-9c9e-4185-a232-4a3fc001a8e1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3859c5a-3cb4-4f4f-9f1a-8a86173d9cd6"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4148a02-27c5-4116-8dbc-7b52c6088afa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9adb0941-432d-468c-af57-f9140722d5d9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e69d63f-bba6-4b32-88a9-aa177d80dd12"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b346116-aa30-446a-934f-b3e1d3299c81"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MinigameUIControls
        m_MinigameUIControls = asset.FindActionMap("MinigameUIControls", throwIfNotFound: true);
        m_MinigameUIControls_Right = m_MinigameUIControls.FindAction("Right", throwIfNotFound: true);
        m_MinigameUIControls_Left = m_MinigameUIControls.FindAction("Left", throwIfNotFound: true);
        m_MinigameUIControls_Up = m_MinigameUIControls.FindAction("Up", throwIfNotFound: true);
        m_MinigameUIControls_Down = m_MinigameUIControls.FindAction("Down", throwIfNotFound: true);
        m_MinigameUIControls_Space = m_MinigameUIControls.FindAction("Space", throwIfNotFound: true);
    }

    ~@MinigameControls()
    {
        UnityEngine.Debug.Assert(!m_MinigameUIControls.enabled, "This will cause a leak and performance issues, MinigameControls.MinigameUIControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MinigameUIControls
    private readonly InputActionMap m_MinigameUIControls;
    private List<IMinigameUIControlsActions> m_MinigameUIControlsActionsCallbackInterfaces = new List<IMinigameUIControlsActions>();
    private readonly InputAction m_MinigameUIControls_Right;
    private readonly InputAction m_MinigameUIControls_Left;
    private readonly InputAction m_MinigameUIControls_Up;
    private readonly InputAction m_MinigameUIControls_Down;
    private readonly InputAction m_MinigameUIControls_Space;
    public struct MinigameUIControlsActions
    {
        private @MinigameControls m_Wrapper;
        public MinigameUIControlsActions(@MinigameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Right => m_Wrapper.m_MinigameUIControls_Right;
        public InputAction @Left => m_Wrapper.m_MinigameUIControls_Left;
        public InputAction @Up => m_Wrapper.m_MinigameUIControls_Up;
        public InputAction @Down => m_Wrapper.m_MinigameUIControls_Down;
        public InputAction @Space => m_Wrapper.m_MinigameUIControls_Space;
        public InputActionMap Get() { return m_Wrapper.m_MinigameUIControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MinigameUIControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMinigameUIControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MinigameUIControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MinigameUIControlsActionsCallbackInterfaces.Add(instance);
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Space.started += instance.OnSpace;
            @Space.performed += instance.OnSpace;
            @Space.canceled += instance.OnSpace;
        }

        private void UnregisterCallbacks(IMinigameUIControlsActions instance)
        {
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Space.started -= instance.OnSpace;
            @Space.performed -= instance.OnSpace;
            @Space.canceled -= instance.OnSpace;
        }

        public void RemoveCallbacks(IMinigameUIControlsActions instance)
        {
            if (m_Wrapper.m_MinigameUIControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMinigameUIControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MinigameUIControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MinigameUIControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MinigameUIControlsActions @MinigameUIControls => new MinigameUIControlsActions(this);
    public interface IMinigameUIControlsActions
    {
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnSpace(InputAction.CallbackContext context);
    }
}
